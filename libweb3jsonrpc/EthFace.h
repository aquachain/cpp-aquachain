/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_DEV_RPC_ETHFACE_H_
#define JSONRPC_CPP_STUB_DEV_RPC_ETHFACE_H_

#include "ModularServer.h"

namespace dev {
    namespace rpc {
        class EthFace : public ServerInterface<EthFace>
        {
            public:
                EthFace()
                {
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_protocolVersion", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_protocolVersionI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_hashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_hashrateI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_coinbase", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_coinbaseI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_mining", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::EthFace::aqua_miningI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_gasPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_gasPriceI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_accounts", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::EthFace::aqua_accountsI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_blockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_blockNumberI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getBalance", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getBalanceI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getStorageAt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getStorageAtI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getStorageRoot", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getStorageRootI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getTransactionCount", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getTransactionCountI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_pendingTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_pendingTransactionsI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getBlockTransactionCountByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getBlockTransactionCountByHashI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getBlockTransactionCountByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getBlockTransactionCountByNumberI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getUncleCountByBlockHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getUncleCountByBlockHashI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getUncleCountByBlockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getUncleCountByBlockNumberI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getCode", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getCodeI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_sendTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_sendTransactionI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_call", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_callI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_flush", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::EthFace::aqua_flushI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getBlockByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::EthFace::aqua_getBlockByHashI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getBlockByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::EthFace::aqua_getBlockByNumberI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getTransactionByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getTransactionByHashI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getTransactionByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getTransactionByBlockHashAndIndexI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getTransactionByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getTransactionByBlockNumberAndIndexI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getTransactionReceipt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getTransactionReceiptI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getUncleByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getUncleByBlockHashAndIndexI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getUncleByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getUncleByBlockNumberAndIndexI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_newFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_newFilterI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_newFilterEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_newFilterExI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_newBlockFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_newBlockFilterI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_newPendingTransactionFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EthFace::aqua_newPendingTransactionFilterI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_uninstallFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_uninstallFilterI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getFilterChanges", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getFilterChangesI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getFilterChangesEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getFilterChangesExI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getFilterLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getFilterLogsI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getFilterLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_getFilterLogsExI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_getLogsI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_getLogsExI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_getWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::EthFace::aqua_getWorkI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_submitWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_submitWorkI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_submitHashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_submitHashrateI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_register", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_registerI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_unregister", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_unregisterI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_fetchQueuedTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_fetchQueuedTransactionsI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_signTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_signTransactionI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_inspectTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_inspectTransactionI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_sendRawTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_sendRawTransactionI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_notePassword", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EthFace::aqua_notePasswordI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_syncing", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT,  NULL), &dev::rpc::EthFace::aqua_syncingI);
                    this->bindAndAddMaquaod(jsonrpc::Procedure("aqua_estimateGas", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EthFace::aqua_estimateGasI);
                }

                inline virtual void aqua_protocolVersionI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_protocolVersion();
                }
                inline virtual void aqua_hashrateI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_hashrate();
                }
                inline virtual void aqua_coinbaseI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_coinbase();
                }
                inline virtual void aqua_miningI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_mining();
                }
                inline virtual void aqua_gasPriceI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_gasPrice();
                }
                inline virtual void aqua_accountsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_accounts();
                }
                inline virtual void aqua_blockNumberI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_blockNumber();
                }
                inline virtual void aqua_getBalanceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getBalance(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_getStorageAtI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getStorageAt(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void aqua_getStorageRootI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getStorageRoot(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_getTransactionCountI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getTransactionCount(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_pendingTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_pendingTransactions();
                }
                inline virtual void aqua_getBlockTransactionCountByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getBlockTransactionCountByHash(request[0u].asString());
                }
                inline virtual void aqua_getBlockTransactionCountByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getBlockTransactionCountByNumber(request[0u].asString());
                }
                inline virtual void aqua_getUncleCountByBlockHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getUncleCountByBlockHash(request[0u].asString());
                }
                inline virtual void aqua_getUncleCountByBlockNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getUncleCountByBlockNumber(request[0u].asString());
                }
                inline virtual void aqua_getCodeI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getCode(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_sendTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_sendTransaction(request[0u]);
                }
                inline virtual void aqua_callI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_call(request[0u], request[1u].asString());
                }
                inline virtual void aqua_flushI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_flush();
                }
                inline virtual void aqua_getBlockByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getBlockByHash(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void aqua_getBlockByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getBlockByNumber(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void aqua_getTransactionByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getTransactionByHash(request[0u].asString());
                }
                inline virtual void aqua_getTransactionByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getTransactionByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_getTransactionByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getTransactionByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_getTransactionReceiptI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getTransactionReceipt(request[0u].asString());
                }
                inline virtual void aqua_getUncleByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getUncleByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_getUncleByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getUncleByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_newFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_newFilter(request[0u]);
                }
                inline virtual void aqua_newFilterExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_newFilterEx(request[0u]);
                }
                inline virtual void aqua_newBlockFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_newBlockFilter();
                }
                inline virtual void aqua_newPendingTransactionFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_newPendingTransactionFilter();
                }
                inline virtual void aqua_uninstallFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_uninstallFilter(request[0u].asString());
                }
                inline virtual void aqua_getFilterChangesI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getFilterChanges(request[0u].asString());
                }
                inline virtual void aqua_getFilterChangesExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getFilterChangesEx(request[0u].asString());
                }
                inline virtual void aqua_getFilterLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getFilterLogs(request[0u].asString());
                }
                inline virtual void aqua_getFilterLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getFilterLogsEx(request[0u].asString());
                }
                inline virtual void aqua_getLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getLogs(request[0u]);
                }
                inline virtual void aqua_getLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_getLogsEx(request[0u]);
                }
                inline virtual void aqua_getWorkI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_getWork();
                }
                inline virtual void aqua_submitWorkI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_submitWork(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void aqua_submitHashrateI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_submitHashrate(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aqua_registerI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_register(request[0u].asString());
                }
                inline virtual void aqua_unregisterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_unregister(request[0u].asString());
                }
                inline virtual void aqua_fetchQueuedTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_fetchQueuedTransactions(request[0u].asString());
                }
                inline virtual void aqua_signTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_signTransaction(request[0u]);
                }
                inline virtual void aqua_inspectTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_inspectTransaction(request[0u].asString());
                }
                inline virtual void aqua_sendRawTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_sendRawTransaction(request[0u].asString());
                }
                inline virtual void aqua_notePasswordI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_notePassword(request[0u].asString());
                }
                inline virtual void aqua_syncingI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aqua_syncing();
                }
                inline virtual void aqua_estimateGasI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aqua_estimateGas(request[0u]);
                }
                virtual std::string aqua_protocolVersion() = 0;
                virtual std::string aqua_hashrate() = 0;
                virtual std::string aqua_coinbase() = 0;
                virtual bool aqua_mining() = 0;
                virtual std::string aqua_gasPrice() = 0;
                virtual Json::Value aqua_accounts() = 0;
                virtual std::string aqua_blockNumber() = 0;
                virtual std::string aqua_getBalance(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_getStorageAt(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual std::string aqua_getStorageRoot(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_getTransactionCount(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_pendingTransactions() = 0;
                virtual Json::Value aqua_getBlockTransactionCountByHash(const std::string& param1) = 0;
                virtual Json::Value aqua_getBlockTransactionCountByNumber(const std::string& param1) = 0;
                virtual Json::Value aqua_getUncleCountByBlockHash(const std::string& param1) = 0;
                virtual Json::Value aqua_getUncleCountByBlockNumber(const std::string& param1) = 0;
                virtual std::string aqua_getCode(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_sendTransaction(const Json::Value& param1) = 0;
                virtual std::string aqua_call(const Json::Value& param1, const std::string& param2) = 0;
                virtual bool aqua_flush() = 0;
                virtual Json::Value aqua_getBlockByHash(const std::string& param1, bool param2) = 0;
                virtual Json::Value aqua_getBlockByNumber(const std::string& param1, bool param2) = 0;
                virtual Json::Value aqua_getTransactionByHash(const std::string& param1) = 0;
                virtual Json::Value aqua_getTransactionByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aqua_getTransactionByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aqua_getTransactionReceipt(const std::string& param1) = 0;
                virtual Json::Value aqua_getUncleByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aqua_getUncleByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_newFilter(const Json::Value& param1) = 0;
                virtual std::string aqua_newFilterEx(const Json::Value& param1) = 0;
                virtual std::string aqua_newBlockFilter() = 0;
                virtual std::string aqua_newPendingTransactionFilter() = 0;
                virtual bool aqua_uninstallFilter(const std::string& param1) = 0;
                virtual Json::Value aqua_getFilterChanges(const std::string& param1) = 0;
                virtual Json::Value aqua_getFilterChangesEx(const std::string& param1) = 0;
                virtual Json::Value aqua_getFilterLogs(const std::string& param1) = 0;
                virtual Json::Value aqua_getFilterLogsEx(const std::string& param1) = 0;
                virtual Json::Value aqua_getLogs(const Json::Value& param1) = 0;
                virtual Json::Value aqua_getLogsEx(const Json::Value& param1) = 0;
                virtual Json::Value aqua_getWork() = 0;
                virtual bool aqua_submitWork(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual bool aqua_submitHashrate(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aqua_register(const std::string& param1) = 0;
                virtual bool aqua_unregister(const std::string& param1) = 0;
                virtual Json::Value aqua_fetchQueuedTransactions(const std::string& param1) = 0;
                virtual std::string aqua_signTransaction(const Json::Value& param1) = 0;
                virtual Json::Value aqua_inspectTransaction(const std::string& param1) = 0;
                virtual std::string aqua_sendRawTransaction(const std::string& param1) = 0;
                virtual bool aqua_notePassword(const std::string& param1) = 0;
                virtual Json::Value aqua_syncing() = 0;
                virtual std::string aqua_estimateGas(const Json::Value& param1) = 0;
        };

    }
}
#endif //JSONRPC_CPP_STUB_DEV_RPC_ETHFACE_H_
